version: 2
#  Copyright (C) 2018-2022 LEIDOS.
# 
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not
#  use this file except in compliance with the License. You may obtain a copy of
#  the License at
# 
#  http://www.apache.org/licenses/LICENSE-2.0
# 
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations under
#  the License.
# 

# Configuration file for Circle CI 
# CI will report failure if any executed command returns and error status
# Operations performed are as follows
# Build source code
# Run unit tests for C++ and Java
# Run static code analyzer for SourceCloud
# Upload test results
# Every run command should start with source ${INIT_ENV} to ensure all default dependancies are available
jobs:
  build:
    # Pull docker image 
    # XTERM used for better make output        
    docker:
      - image: cimg/node:15.0.1
    resource_class: large
    working_directory: "metrics" 
    steps:
      #setup remote docker
      - setup_remote_docker :
          docker_layer_caching: true   
      - run: git clone https://github.com/SaikrishnaBairamoni/code-gov-github-metrics.git
      - run: 
          name: install Deps
          command: |
            set -x
            sudo apt-get update
            sudo apt-get install nano sudo
      - run:
          name: Copy env.example
          command: |
            ls -la
            pwd
            cd code-gov-github-metrics
            ls -la
            pwd
            cd code-gov-repo-metrics
            ls -la
            pwd
            touch .env
            cp .env.example .env
      - run:
          name: RUN metrics
          command: |
            pwd
            npm run start 2018-12-01 2018-12-31
  Generate metrics :
   machine:     
    docker:
      - image: circleci/python:3.8.1
    working_directory: ~/repo
    environment:
      BRANCH: master
      TARGET_REPO: github.com/saikrishnabairamoni.github.io
      PELICAN_OUTPUT_FOLDER: output
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - run:
          name: build static pages with Pelican
          command: |
            . venv/bin/activate
            pelican content -o output -s publishconf.py
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - deploy:
          name: Deploy static pages to Github Pages
          command: |
            if [ "${CIRCLE_BRANCH}" = "master" ]; then
              echo -e "Starting to deploy to Github Pages\n"
              cd ~/repo
              git config --global user.email "builds@circleci.com"
              git config --global user.name "CircleCI"
              #using token clone gh-pages branch
              git clone --quiet --branch=$CIRCLE_BRANCH https://${ghp_UFSYtdn5nJldinSaLElL6kjvEuNq0qIDEkF}@github.com/$TARGET_REPO built_website > /dev/null
              # Installing rsync
              echo "Installing rsync"
              sudo apt-get -y install rsync
              #go into directory and copy data we're interested in to that directory
              cd built_website
              echo "rsync built code with checked out code..."
              rsync -r --exclude=.git --delete ../$PELICAN_OUTPUT_FOLDER/ ./
              #add, commit and push files
              echo "add files to git..."
              git add -f .
              echo "commit files to git repository..."
              if git commit -m "CircleCI build $CIRCLE_BUILD_NUM pushed to Github Pages" ; then
                echo "git push files with force..."
                git push -fq origin $BRANCH > /dev/null
                echo -e "Deploy completed\n"
              else
                echo "Content not changed, nothing to deploy"
              fi
            else
              echo "Not master branch, dry run only"
            fi
      - run:
          name: Purge Cloudflare cache
          command: |
            if [ "${CIRCLE_BRANCH}" = "master" ]; then
              curl -X POST "https://api.cloudflare.com/client/v4/zones/$CF_ZONE_ID/purge_cache" \
                -H "X-Auth-Email: $CF_AUTH_EMAIL" \
                -H "X-Auth-Key: $CF_AUTH_KEY" \
                -H "Content-Type: application/json" \
                --data '{"purge_everything":true}'
            fi     
workflows:
  version: 2
  build:
    jobs:

      - Generate metrics:
          filters:
           branches:
              ignore: develop
      - build
